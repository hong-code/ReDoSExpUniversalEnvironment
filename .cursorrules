# Multi-Language Regex Benchmark — Condensed Rules


**Create/Modify files and folder on host machine. But when test the program or a script, run it in docker container environment.**

## 1  Project Layout

```
<language>/
├── src… / Makefile (or build script)
├── README.md
├── tests/
│   ├── run_tests.sh   ├── simple_test.sh
│   ├── test_data.txt  ├── simple_test.txt
│   └── full_match_test.txt
└── bin/ (created **only** by the build, never checked-in)
```

## 2  Program Contract

* **Args:**

  1. Base64 regex 2. text file path 3. mode (0 = partial, 1 = full).
* **Output:**
  `{elapsed_ms_with_6dp} - {match_count}`
* Test data and Base64 patterns must be identical in every language.

## 3  README Template (nothing else)

```markdown
# Benchmark Program – <Language>

## Files
<brief list>

## Building and Running
### Build
<commands>
### Run tests
<commands>

## Program Usage
<example>

## Directory Structure
<tree>
```

* No Docker instructions. Keep focus on local build/run.

## 4  Dockerfile Rules

* Tag images `benchmark-test`; always run with `--rm`.
* Exploit layer caching: install packages in this order (rare → frequent):

  1. core dev tools 2. network utils 3. editors & misc 4. pkg managers 5. language deps.
* End each `RUN … apt-get install` with `&& rm -rf /var/lib/apt/lists/*`.
* Build & test each language in **PROGRAM BUILD AND SETUP AND TESTING** of the Dockerfile.
* Never pre-create `bin/`; builds must do that.

## 5  Implementation Checklist

* ☐  Runtime/compiler added to Dockerfile §2
* ☐  3-arg interface upheld; Base64 decoded via std-lib
* ☐  Modes 0/1 implemented; output exact
* ☐  All tests pass; timing accurate
* ☐  README uses template; no Docker notes
* ☐  Build & test steps added to Dockerfile §§5–6

## 6  Coding Guidelines

| Purpose | Name              |
| ------- | ----------------- |
| Timing  | `elapsed_time`    |
| Matches | `match_count`     |
| Regex   | `regex`/`pattern` |

* Use high-res timers; exit cleanly on errors.

## 7  Maintenance

* Add tests & deps to **all** languages together.
* Rebuild/test Docker after any change.
* Keep directory contents minimal—source, README, tests, and build artefacts only.
